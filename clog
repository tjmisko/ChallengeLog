#!/bin/bash
export CLOG_DIR="C:/Users/TMisko/Tools/ChallengeLog"

usage() {
    echo unkown command: "$@"
    echo "Usage: clog [subcommand]"
    echo -e "\n"
    echo "Options:"
    echo -e "\tstart - start the work timer"
    echo -e "\tstop - stop the work timer"
    echo -e "\tintervals - compute the length of work intervals"
    echo -e "\ttotal - sum the total intervals"
    echo -e "\tupdate - push a status update to github"
    echo -e "\tstatus - check the status of the timer and log"
    echo -e "\trollover - archive the previous week\'s log and create the new log"
    echo -e "\tedit - launch vim to edit the log directly"
}

clog_start() {
    shift
    CLOG_START_DT=$(date +%F\ %H\:%M\:%S)
    echo start: $CLOG_START_DT
    echo "start: $CLOG_START_DT" >> $CLOG_DIR/challenge.log
}

clog_stop() {
    shift
    CLOG_STOP_DT=$(date +%F\ %H\:%M\:%S)
    echo "stop: $CLOG_STOP_DT"
    echo "stop: $CLOG_STOP_DT" >> $CLOG_DIR/challenge.log
}

intervals() {
    shift
    cat $CLOG_DIR/challenge.log | \
    awk '{ print $2" "$3 }' | \
    xargs -I {} date -d "{}" '+%s' | \
    awk '{ if (NR % 2 == 1) { odd = $0; } else { result = $0 - odd; print int(result/36)/100 " hours"; } }'
}

total() {
    shift
    CLOG_TOTAL=$(intervals | awk '{ sum+=$1 } END { print sum" hours" }')
    echo $CLOG_TOTAL
}

update() {
    total 
    echo Tristan is at $CLOG_TOTAL hours this week\! > $CLOG_DIR/readme.md
    cat $CLOG_DIR/challenge.log | sed -e 's/stop/Tristan stopped work at/' | sed -e 's/start/Tristan started work at/' | sed 's/T/* T/' >> $CLOG_DIR/readme.md
    echo -e "\n"
    cat $CLOG_DIR/challenge.log
    echo -e "\n"
    echo Currently at: $CLOG_TOTAL
    echo -e "\n"
    git -C $CLOG_DIR commit -am "Tristan\'s $(date +%F\ %H\:%M\:%S) status update"
    git -C $CLOG_DIR push origin tristan
}

status() {
    echo "No op for now"
    echo -e "\n"
    echo "To be implemented"
    echo "- Determine current timer status by printing out the last line of the file"
    echo "- Check whether each start has a matching stop in the current log"
    echo "- Check whether the log is stale and whether it needs to be rolled into the archive whether"
}

rollover() {
    echo "No op for now"
    echo -e "\n"
    echo "To be implemented"
    echo "- Check the status of the current log, and fail if status fails, suggesting edits to be made"
    echo "- Move the current log into the archive for this week"
    echo "- Check whether the log is stale (whether it needs to be rolled into the archive"
}

edit() {
    vim $CLOG_DIR/challenge.log
    # To do: allow it to accept a week number argument to edit in the archive
}

declare -A COMMANDS=(
    [main]=usage
    [start]=clog_start
    [stop]=clog_stop
    [intervals]=intervals
    [total]=total
    [update]=update
    [status]=status
    [rollover]=rollover
    [edit]=edit
)

"${COMMANDS[${1:-main}]:-${COMMANDS[main]}}" "$@"
# Thanks https://blogsh.github.io/2020/03/21/subcommands-in-bash-scripts.html for a well explained post on how to setup nice subcommands
